/***************************************************
 ** @author   STF 475
 ** @version  0.0.1
 ** @purpose  9:5.2.2, Verify that additional suffices are attached in case of name clashes between types
 ** @verdict  pass accept, ttcn3verdict:pass
***************************************************/
// The following requirements are tested:
// Rule j:
// If the name being generated is the name of a TTCN-3 type and the character string
// generated by items a) to i) above is identical to the name of another TTCN-3 type
// previously generated in the same TTCN-3 module, or is one of the reserved words
// specified in clause 11.27 of Recommendation ITU T X.680 [3], then a postfix shall
// be appended to the character string generated according to the above rules. The
// postfix shall consist of a "_" (LOW LINE) followed by the canonical lexical
// representation (see W3C XML Schema Part 2 [9], clause 2.3.1) of an integer. This
// integer shall be the least positive integer such that the new name is different
// from the type reference name of any other TTCN-3 type assignment previously
// generated in any of those TTCN-3 modules.
module Pos_050202_name_conversion_rules_014 {

   import from schema_Pos_050202_name_conversion_rules_014 language "XSD" all;

   template MyType_2 m_msg := 1.0;



    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type universal charstring File;
    type record of File FileList;

    type port P message {
        inout all;
    }
    type component C {
        port P p;
    }

    /**
     * @desc lexical compare the charstring p_textToMatch with the contents of the reference XML file and returns true if they represent the same XML structure
     * @param p_textToMatch text to be compared with the UTF-8 contents of the XML file
     * @param p_referenceXmlFile the XML file
     * @param p_xsdFileList the list of XSD files
     * @param p_matchError the error result in case it did not match
     * @param p_referenceTTCN3File the file of the TTCN-3 test module. This path is used to find the reference XML file relative to this path, by keeping the TTCN-3 code file system independent.
     * @return true if p_textToMatch and the contents of p_referenceXmlFile represent the same XML structure
     */
    external function matchFile(Raw p_textToMatch, File p_referenceXmlFile, FileList p_xsdFileList, out universal charstring p_matchError, File p_referenceTTCN3File := __FILE__) return boolean;

    testcase TC_Pos_050202_name_conversion_rules_014() runs on C system C {
        var Raw v_rcv;
        var universal charstring v_matchError;

        map(self:p, system:p);

        // encode the message
        p.send(m_msg);

        alt {
            // compare the encoded message with the reference XML file
            []    p.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (matchFile(v_rcv, "Pos_050202_name_conversion_rules_014.xml", { "Pos_050202_name_conversion_rules_014.xsd" }, v_matchError)) {
                    alt {
                        // match decoded value to pass test
                        [] p.receive(m_msg) {
                            setverdict(pass, "Decoded value matches encoded template and reference XML");
                        }
                        [] p.receive {
                            setverdict(fail, "XML decoding failure");
                        }
                    }
                } else {
                    setverdict(fail, v_matchError);
                }
            }
            [] p.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Pos_050202_name_conversion_rules_014(), PX_TC_EXECUTION_TIMEOUT);
    }


}
