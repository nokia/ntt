/*****************************************************************
 ** @author   STF 433 (updated by STF 521)
 ** @version  0.0.2
 ** @purpose  1:22.3.1, Ensure that the IUT correctly handles multiple client calls to the same server
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

module Sem_220301_CallOperation_004 {

    /**
    * @desc testing of inline return template for remote procedure call
    * @param p_par1 only input parameter
    * @param p_par2 must have value 4 at return
    * @param p_par3 must have value 5 at return
    * @return must return value 1
    */
    signature p_Sem_220301_CallOperation_004(in integer p_par1, out integer p_par2, inout integer p_par3) return integer;


    template p_Sem_220301_CallOperation_004 s_returnTemplate := {
        p_par1 := -,
        p_par2 := 4,
        p_par3 := 5
    }

    template p_Sem_220301_CallOperation_004 s_wrongTemplate := {
        p_par1 := -,
        p_par2 := 2,
        p_par3 := 3
    }

    template p_Sem_220301_CallOperation_004 s_callTemplate := {
        p_par1 := 1,
        p_par2 := -,
        p_par3 := 3
    }

    type port remotePort procedure {
        inout p_Sem_220301_CallOperation_004;
    }

    type component GeneralComp {
        port remotePort PCO;
    }

    function f_ClientQuery() runs on GeneralComp {
        var integer v_zero:=0;
        var integer v_one:=1;
        var boolean first:=true;

        PCO.call(p_Sem_220301_CallOperation_004:s_callTemplate, 5.0) {

            [first] PCO.getreply(p_Sem_220301_CallOperation_004:s_returnTemplate value 1) {
                first:=false;
                setverdict(pass);
            }
            [] PCO.catch (timeout) {
                setverdict(fail, "Component did not receive a response");
            }
        }
    }

    function f_ServerResponses() runs on GeneralComp {
        var GeneralComp v_clientAddress;
        var integer v_par1;
        var integer v_par3;
        timer t_timeout:=2.0;

        template p_Sem_220301_CallOperation_004 s_acceptTemplate := {
            p_par1 := ?,
            p_par2 := ?,
            p_par3 := ?
        };


        t_timeout.start;

        alt {
            [] PCO.getcall(p_Sem_220301_CallOperation_004:s_acceptTemplate) -> param(v_par1, - , v_par3) sender v_clientAddress {
                PCO.reply(p_Sem_220301_CallOperation_004:{p_par1 := -, p_par2 := v_par1+v_par3, p_par3 := v_par1+v_par3+1} value v_par1) to v_clientAddress;  	//procedure return values are sent
                repeat;
            }
            [] t_timeout.timeout {
                setverdict(fail);
            }
        }

    }

    testcase TC_Sem_220301_CallOperation_004() runs on GeneralComp system GeneralComp {
        var GeneralComp server := GeneralComp.create("RemoteProcedure Service");
        var GeneralComp client := GeneralComp.create("RemoteProcedure Client");
        var GeneralComp client2 := GeneralComp.create("RemoteProcedure Client");
        // map the PTCs to the system port
        connect(server:PCO, client:PCO);
        connect(server:PCO, client2:PCO);

        server.start(f_ServerResponses());

        client.start(f_ClientQuery());
        client2.start(f_ClientQuery());

        interleave {
            [] client.done {}
            [] client2.done {}
        }
        server.stop;

        alt {
            [] all component.done {}
        }

        disconnect(server:PCO);
    }

    control{
        execute(TC_Sem_220301_CallOperation_004(), 30.0);
    }

}