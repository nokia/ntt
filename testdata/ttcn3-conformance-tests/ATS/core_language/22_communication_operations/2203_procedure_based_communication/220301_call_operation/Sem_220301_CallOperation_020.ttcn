/*****************************************************************
 ** @author   STF 521
 ** @version  0.0.1
 ** @purpose  1:22.3.1, verify that exceptions that are not related to the actual call are ignored in unqualified catch statements
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// h) The selection of the alternatives to a call shall only be based on getreply and catch operations
// for the called procedure. Unqualified getreply and catch operations shall only treat replies from
// and exceptions raised by the called procedure.

module Sem_220301_CallOperation_020 {

	signature S1() noblock exception(integer);
	signature S2() exception(charstring);

	type port P procedure {
		inout S1, S2;
	}

    type component GeneralComp {
		port P p;
	}

	function f_called() runs on GeneralComp {
		p.getcall(S1:?);
		p.getcall(S2:?);
		p.raise(S1, 1);
		p.raise(S2, "exc");
	}

    testcase TC_Sem_220301_CallOperation_020() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create;
		connect(self:p, v_ptc:p);
		v_ptc.start(f_called());
		p.call(S1:{}); // non-blocking call (but the script "forgets" to handle the exception - this should clog the port
		p.call(S2:{}, 1.0) {
			[] p.catch { setverdict(fail, "The exception is not the expected one!"); } // this one should receive only S2 exceptions, but there's S1 in the port queue
			[] p.catch(timeout) { setverdict(pass, "Timeout as expected"); }
		}
    }

    control {
        execute(TC_Sem_220301_CallOperation_020(), 5.0);
    }
}