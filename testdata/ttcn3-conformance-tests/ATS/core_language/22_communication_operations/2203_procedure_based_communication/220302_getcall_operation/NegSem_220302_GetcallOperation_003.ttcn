/*****************************************************************
 ** @author   STF 433
 ** @version  0.0.1
 ** @purpose  1:22.3.2, Ensure that getcall for any call does not allow param assignment
 ** @verdict  pass reject
 *****************************************************************/

module NegSem_220302_GetcallOperation_003 {

    /**
    * @desc testing of inline return template for remote procedure call
    * @param p_par1 only input parameter
    * @param p_par2 must have value 4 at return
    * @param p_par3 must have value 5 at return
    * @return must return value 1
    */
    signature p_NegSem_220302_GetcallOperation_003(in integer p_par1, out integer p_par2, inout integer p_par3) return integer;

    template p_NegSem_220302_GetcallOperation_003 s_returnTemplate := {
        p_par1 := -,
        p_par2 := 4,
        p_par3 := 5
    }

    template p_NegSem_220302_GetcallOperation_003 s_wrongTemplate := {
        p_par1 := -,
        p_par2 := 2,
        p_par3 := 3
    }

    template p_NegSem_220302_GetcallOperation_003 s_callTemplate := {
        p_par1 := 1,
        p_par2 := -,
        p_par3 := 3
    }

    type port remotePort procedure {
        inout p_NegSem_220302_GetcallOperation_003;
    }

    type component GeneralComp {
        port remotePort PCO;
    }

    function f_ClientQuery() runs on GeneralComp {
	  var integer v_zero:=0;
	  var integer v_one:=1;

        PCO.call(p_NegSem_220302_GetcallOperation_003:s_callTemplate, 5.0) {

            [] PCO.getreply(p_NegSem_220302_GetcallOperation_003:s_wrongTemplate value 1) {
                setverdict(fail);
            }
            [] PCO.getreply(p_NegSem_220302_GetcallOperation_003:s_returnTemplate value 2) {
                setverdict(fail);
            }
            [v_one>v_zero] PCO.getreply(p_NegSem_220302_GetcallOperation_003:s_returnTemplate value 1) {		//check that boolean guard is correctly evaluated
                setverdict(pass);
            }
            [] PCO.catch (timeout) {
                setverdict(fail);
            }
        }
    }

    function f_ServerResponses() runs on GeneralComp {

	var integer v_par1;
	var integer v_par3;
	timer t_timeout:=30.0;

 	template p_NegSem_220302_GetcallOperation_003 s_acceptTemplate := {
        p_par1 := ?,
        p_par2 := ?,
        p_par3 := ?
    };


	t_timeout.start;

	 alt {
      [] PCO.getcall -> param(v_par1, - , v_par3) {  //not allowed param assignment for any call
      }
      [] t_timeout.timeout {
      }
	 }

    }


	testcase TC_NegSem_220302_GetcallOperation_003() runs on GeneralComp system GeneralComp {
       var GeneralComp server := GeneralComp.create("RemoteProcedure Service");
       var GeneralComp client := GeneralComp.create("RemoteProcedure Client");
       	timer t_wait:=1.0;

       // map the PTCs to the system port
       connect(server:PCO, client:PCO);

       server.start(f_ServerResponses());
       client.start(f_ClientQuery());

       alt {
           [] client.done {
             t_wait.start;
             while(t_wait.running) {	//this gives a chance for server to still test for second getcall match
             }
               server.stop;
           }
       }

       alt {
           [] all component.done {}
       }

       disconnect(server:PCO);
   }

    control{
        execute(TC_NegSem_220302_GetcallOperation_003());
    }

}