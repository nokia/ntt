/***************************************************
 ** @author   STF 548
 ** @version  0.0.1
 ** @purpose  1:16.1.4, verify that a function called during receiving operation cannot contain the setencode operation (in templates)
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If value returning functions are called in receiving communication operations (in templates, template fields,
// in-line templates, or as actual parameters), in guards or events of alt statements or altsteps (see clause 20.2),
// or in initializations of altstep local definitions (see clause 16.2), the following operations shall not be
// used in functions called in the cases specified above, in order to avoid side effects that cause changing the
// state of the component or the actual snapshot and to prevent different results of subsequent evaluations
// on an unchanged snapshot:
// l) The setencode operation (see note 8 and clause 27.9).

module NegSem_160104_invoking_functions_from_specific_places_301 {
    type port P message {
        inout integer;
    }

    type component GeneralComp {
        port P p;
	}

	function f_test() runs on GeneralComp return template integer {
        p.setencode(integer, "Binary");
		return ?;
	}

    testcase TC_NegSem_160104_invoking_functions_from_specific_places_301() runs on GeneralComp system GeneralComp {
        template @fuzzy integer mw_test := f_test();
        connect(mtc:p, mtc:p);
        p.send(1);
		p.receive(mw_test);
		setverdict(pass);
	}

	control {
		execute(TC_NegSem_160104_invoking_functions_from_specific_places_301());
	}
}
