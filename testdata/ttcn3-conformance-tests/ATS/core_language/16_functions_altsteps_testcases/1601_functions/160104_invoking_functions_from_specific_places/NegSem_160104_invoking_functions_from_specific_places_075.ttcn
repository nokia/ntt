/***************************************************
 ** @author   STF 521
 ** @version  0.0.1
 ** @purpose  1:16.1.4, verify that the timer.stop operation cannot be used in a function called during receiving operation (in template fields)
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If value returning functions are called in receiving communication operations (in templates, template fields,
// in-line templates, or as actual parameters), in guards or events of alt statements or altsteps (see clause 20.2),
// or in initializations of altstep local definitions (see clause 16.2), the following operations shall not be
// used in functions called in the cases specified above, in order to avoid side effects that cause changing the
// state of the component or the actual snapshot and to prevent different results of subsequent evaluations
// on an unchanged snapshot:
// d) All timer operations, i.e. start (timer), stop (timer), running (timer), read, timeout (see notes 4 and 6).

module NegSem_160104_invoking_functions_from_specific_places_075 {
	type record R {
		integer field1
	}

    type port P message {
        inout R;
    }

    type component GeneralComp {
        port P p;
		timer tc_tmr := 0.1;
	}

	function f_test() runs on GeneralComp return template integer {
		tc_tmr.stop;
        return ?;
	}

    testcase TC_NegSem_160104_invoking_functions_from_specific_places_075() runs on GeneralComp system GeneralComp {
        template @fuzzy R mw_test := { field1 := f_test() };
        connect(mtc:p, mtc:p);
		tc_tmr.start;
        p.send(R:{ field1 := 1 });
		p.receive(mw_test);
		setverdict(pass);
	}

	control {
		execute(TC_NegSem_160104_invoking_functions_from_specific_places_075());
	}
}
