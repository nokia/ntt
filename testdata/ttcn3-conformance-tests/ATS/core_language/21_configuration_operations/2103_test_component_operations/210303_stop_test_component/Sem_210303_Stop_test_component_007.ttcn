/***************************************************
 ** @author   STF 487
 ** @version  0.0.1
 ** @purpose  1:21.3.3, timer reuse in alive component after explicit stop
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

// The following requirements are tested:
// Stopping an alive-type component means that all variables, timers and ports
// declared in the component type definition of the alive-type component keep their
// value, contents or state.

module Sem_210303_Stop_test_component_007 {

    type port P message {
        inout integer;
    }

	type component GeneralComp {
        timer tc_tmr := 2.0;
        port P p;
	}

    function f_ptcBehaviour() runs on GeneralComp {
        tc_tmr.start;
        p.send(1);
        p.receive(integer:?);
        setverdict(fail);
    }

    function f_ptcSecondBehaviour() runs on GeneralComp {
        tc_tmr.timeout;
        setverdict(pass);
    }


	testcase TC_Sem_210303_Stop_test_component_007() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create("PTC") alive;
        connect(self:p, v_ptc:p);
        v_ptc.start(f_ptcBehaviour());
        p.receive(integer:?);
        v_ptc.stop;
        v_ptc.start(f_ptcSecondBehaviour());
        v_ptc.done;
	}

	control{
	    execute(TC_Sem_210303_Stop_test_component_007());
	}
}

