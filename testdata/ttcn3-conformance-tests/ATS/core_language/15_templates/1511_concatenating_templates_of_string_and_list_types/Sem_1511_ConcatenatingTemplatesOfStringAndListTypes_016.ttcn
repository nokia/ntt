/*****************************************************************
 ** @author   STF 572
 ** @version  0.0.1
 ** @purpose  1:15.11, Automatic escaping of characters when concatenating charstring templates
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// Single templates of charstring and universal charstring types shall contain evaluate only to specific values only,
// AnyValue with or without a length modifier, AnyValueOrNone with a length modifier or pattern.
// The concatenation of templates of character string types results in the sequential concatenation of the single templates
// from left to right. In case all operands are specific values, the result of concatenation will be a specific value.
// In all other cases, if possible, a pattern will be produced. When producing the pattern, the templates are first
// transformed to a character string according to table 14. In the next step, the strings are concatenated and a pattern is
// created from the concatenation result.
// Concatenation operand: Specific values (character strings)
// Transformed string: The character string is escaped by inserting the "\" character before each of the following
// characters: "#", "(", ")", "*", "+", "-", "?", "[", "\", "]", "^", "{", "|", "}".

module Sem_1511_ConcatenatingTemplatesOfStringAndListTypes_016 {
    type component GeneralComp { }
    template charstring m_str := "ABC";
    template charstring m_str2 := m_str & "?*";

    testcase TC_Sem_1511_ConcatenatingTemplatesOfStringAndListTypes_016() runs on GeneralComp {
        log(m_str2);
        if (match("ABCDE", m_str2)) {
            setverdict(fail);
        } else if (match("ABC?*", m_str2)) {
            setverdict(pass);
        } else {
            setverdict(fail);
        }
    }

    control {
        execute(TC_Sem_1511_ConcatenatingTemplatesOfStringAndListTypes_016());
    }
}