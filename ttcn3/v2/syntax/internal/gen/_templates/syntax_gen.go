// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at {{now}}

package syntax

import "fmt"

// Kind describes the kind of a syntax node.
type Kind int32

// IsTerminal returns true if the kind is a terminal. Terminals are also known as leave nodes, lexemes, tokens, ...
func (k Kind) IsTerminal() bool { return k.IsToken() }

// IsToken returns true if the kind is a token. This function is the same as IsTerminal.
func (k Kind) IsToken() bool {
	return __tokens_begin <= k && k <= __tokens_end ||
		k == Unknown ||
		k == Malformed ||
		k == Unterminated
}

// IsNonTerminal returns true if the kind is a non terminal. Non terminals are
// produced by the parser and usually have other non terminals or tokens as
// children.
func (k Kind) IsNonTerminal() bool { return __nodes_begin <= k && k <= __nodes_end }

// IsKeyword returns true if the kind is a keyword.
func (k Kind) IsKeyword() bool { return __keywords_begin <= k && k <= __tokens_end }

// IsLiteral returns true if the kind is a literal token. Literal tokens are
// tokens which have a value, such as identifier, integer, ...
func (k Kind) IsLiteral() bool { return __literals_begin <= k && k <= __literals_end }

// IsTrivia returns true if the kind is either a comment or a preprocessor directive
func (k Kind) IsTrivia() bool { return k == Comment || k == Preproc }

// String returns a human readable name for the kind.
func (k Kind) String() string {
	m := map[Kind]string{
		EOF:          "EOF",
		Root:         "Root",
		Unknown:      "unknown token",
		Malformed:    "malformed token",
		Unterminated: "unterminated string",
		Comment:      "comment",
		Preproc:      "preprocessor directive",
		{{range $name, $value := .TokenMap}}{{$name}}:"{{$value}}",
		{{end}}
		{{range .Productions}}{{.Name.String}}: "{{.Name.String}}",
		{{end}}
	}
	if s, ok := m[k]; ok {
		return s
	}
	return fmt.Sprintf("unknown kind %d", int32(k))
}

const (
	EOF Kind = iota
	__errors_begin
	Unknown
	Malformed
	Unterminated
	__errors_end
	__tokens_begin
	__literals_begin
	Comment
	Preproc
	{{range .ValueTokens}}{{.}}
	{{end -}}
	__literals_end

	__keywords_begin
	{{range .KeywordTokens}}{{.}}
	{{end -}}
	__keywords_end

	{{range .OtherTokens}}{{.}}
	{{end -}}
	__tokens_end

	__nodes_begin
	Root
	{{range .Productions}}{{.Name.String}}
	{{end}}
	__nodes_end
)
